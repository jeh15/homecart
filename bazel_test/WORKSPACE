# -*- mode: python -*-
# vi: set ft=python :

# Copyright (c) 2018, Toyota Research Institute.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

workspace(name = "bazel_test")

DRAKE_COMMIT = "v1.9.0"
DRAKE_CHECKSUM = "a80a38d51bf2608489f7b44a882d00b76dac9765590afbfcf0c17090c16501ab"

# Or choose a specific revision of Drake to use.
# DRAKE_COMMIT = "be4f658487f739ba04ec079de46f9459b719636d"
# DRAKE_CHECKSUM = "31ec8f87df3ceb6516de3c33a14c5d59ac5c003b4faf93ac526877d2e150b394"
#
# You can also use DRAKE_COMMIT to choose a Drake release; eg:
# DRAKE_COMMIT = "v0.15.0"
#
# Before changing the COMMIT, temporarily uncomment the next line so that Bazel
# displays the suggested new value for the CHECKSUM.
# DRAKE_CHECKSUM = "0" * 64

# Or to temporarily build against a local checkout of Drake, at the bash prompt
# set an environment variable before building:
#  export EXAMPLES_LOCAL_DRAKE_PATH=/home/user/stuff/drake

# Load an environment variable.
load("//:environ.bzl", "environ_repository")
environ_repository(name = "environ", vars = ["EXAMPLES_LOCAL_DRAKE_PATH"])
load("@environ//:environ.bzl", EXAMPLES_LOCAL_DRAKE_PATH = "EXAMPLES_LOCAL_DRAKE_PATH")

# This declares the `@drake` repository as an http_archive from github,
# iff EXAMPLES_LOCAL_DRAKE_PATH is unset.  When it is set, this declares a
# `@drake_ignored` package which is never referenced, and thus is ignored.
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
http_archive(
    name = "drake" if not EXAMPLES_LOCAL_DRAKE_PATH else "drake_ignored",
    urls = [x.format(DRAKE_COMMIT) for x in [
        "https://github.com/RobotLocomotion/drake/archive/{}.tar.gz",
    ]],
    sha256 = DRAKE_CHECKSUM,
    strip_prefix = "drake-{}".format(DRAKE_COMMIT.lstrip("v")),
)

# This declares the `@drake` repository as a local directory,
# iff EXAMPLES_LOCAL_DRAKE_PATH is set.  When it is unset, this declares a
# `@drake_ignored` package which is never referenced, and thus is ignored.
local_repository(
    name = "drake" if EXAMPLES_LOCAL_DRAKE_PATH else "drake_ignored",
    path = EXAMPLES_LOCAL_DRAKE_PATH,
)
print("Using EXAMPLES_LOCAL_DRAKE_PATH={}".format(EXAMPLES_LOCAL_DRAKE_PATH)) if EXAMPLES_LOCAL_DRAKE_PATH else None  # noqa

# Reference external software libraries, tools, and toolchains per Drake's
# defaults.  Some software will come from the host system (Ubuntu or macOS);
# other software will be downloaded in source or binary form from GitHub or
# other sites.
load("@drake//tools/workspace:default.bzl", "add_default_workspace")
add_default_workspace()

# Load CMake Rule
http_archive(
    name = "rules_foreign_cc",
    strip_prefix = "rules_foreign_cc-0.9.0",
    url = "https://github.com/bazelbuild/rules_foreign_cc/archive/0.9.0.tar.gz",
    sha256 = "2a4d07cd64b0719b39a7c12218a3e507672b82a97b98c6a89d38565894cf7c51",
)

load("@rules_foreign_cc//foreign_cc:repositories.bzl", "rules_foreign_cc_dependencies")

rules_foreign_cc_dependencies()

# Load Git Repository Rule
load("@bazel_tools//tools/build_defs/repo:git.bzl", "new_git_repository")

new_git_repository(
    name = "ur_rtde",
    remote = "git@gitlab.com:jeh15-gitlab/ur_rtde.git",
    commit = "04a596670aa925dffbae943dd1dd0aea8c40ba6e",
    shallow_since = "1667626849 -0400",
    build_file = "@//:ur_rtde.BUILD.bazel",
)

### OLD
# new_git_repository(
#     name = "ur_rtde",
#     remote = "https://gitlab.com/jeh15-gitlab/ur_rtde.git",
#     branch = "master",
#     build_file = "ur_rtde.BUILD",
# )

# # Does not support Python Bindings:
# new_git_repository(
#     name = "ur_rtde",
#     remote = "https://gitlab.com/jeh15-gitlab/ur_rtde.git",
#     # branch = "master",
#     commit = "208627931421543f16fcf27e051c34f7507b17c0", 
#     shallow_since = "1667306432 +0000",
#     build_file_content = """
# # ur_rtde Build File:
# package(default_visibility = ["//visibility:public"])

# cc_library(
#     name = "ur_rtde",
#     srcs = [
#         "src/dashboard_client.cpp",
#         "src/dashboard_enums.cpp",
#         "src/robot_state.cpp",
#         "src/robotiq_gripper.cpp",
#         "src/rtde.cpp",
#         "src/rtde_control_interface.cpp",
#         "src/rtde_io_interface.cpp",
#         "src/rtde_receive_interface.cpp",
#         "src/script_client.cpp",
#         "src/urcl/server.cpp",
#         "src/urcl/tcp_socket.cpp",
#     ],
#     hdrs = [
#         "include/ur_rtde/dashboard_client.h",
#         "include/ur_rtde/dashboard_enums.h",
#         "include/ur_rtde/robot_state.h",
#         "include/ur_rtde/robotiq_gripper.h",
#         "include/ur_rtde/rtde.h",
#         "include/ur_rtde/rtde_control_interface.h",
#         "include/ur_rtde/rtde_control_interface_doc.h",
#         "include/ur_rtde/rtde_io_interface.h",
#         "include/ur_rtde/rtde_io_interface_doc.h",
#         "include/ur_rtde/rtde_receive_interface.h",
#         "include/ur_rtde/rtde_receive_interface_doc.h",
#         "include/ur_rtde/rtde_utility.h",
#         "include/ur_rtde/script_client.h",
#         "include/urcl/script_sender.h",
#         "include/urcl/server.h",
#         "include/urcl/tcp_socket.h",
#         ],
#     includes = [
#         "src",
#         "src/urcl",
#         "include",
#         "include/ur_rtde",
#         "include/urcl",
#     ],
# )
# """,
# )